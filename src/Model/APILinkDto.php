<?php
/**
 * APILinkDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SternerStuff\InsightlyPHP\Model;

use \ArrayAccess;
use \SternerStuff\InsightlyPHP\ObjectSerializer;

/**
 * APILinkDto Class Doc Comment
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APILinkDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APILinkDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'link_id' => 'int',
        'object_name' => 'string',
        'object_id' => 'int',
        'link_object_name' => 'string',
        'link_object_id' => 'int',
        'role' => 'string',
        'details' => 'string',
        'relationship_id' => 'int',
        'is_forward' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'link_id' => 'int64',
        'object_name' => null,
        'object_id' => 'int64',
        'link_object_name' => null,
        'link_object_id' => 'int64',
        'role' => null,
        'details' => null,
        'relationship_id' => 'int64',
        'is_forward' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'link_id' => 'LINK_ID',
        'object_name' => 'OBJECT_NAME',
        'object_id' => 'OBJECT_ID',
        'link_object_name' => 'LINK_OBJECT_NAME',
        'link_object_id' => 'LINK_OBJECT_ID',
        'role' => 'ROLE',
        'details' => 'DETAILS',
        'relationship_id' => 'RELATIONSHIP_ID',
        'is_forward' => 'IS_FORWARD'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'link_id' => 'setLinkId',
        'object_name' => 'setObjectName',
        'object_id' => 'setObjectId',
        'link_object_name' => 'setLinkObjectName',
        'link_object_id' => 'setLinkObjectId',
        'role' => 'setRole',
        'details' => 'setDetails',
        'relationship_id' => 'setRelationshipId',
        'is_forward' => 'setIsForward'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'link_id' => 'getLinkId',
        'object_name' => 'getObjectName',
        'object_id' => 'getObjectId',
        'link_object_name' => 'getLinkObjectName',
        'link_object_id' => 'getLinkObjectId',
        'role' => 'getRole',
        'details' => 'getDetails',
        'relationship_id' => 'getRelationshipId',
        'is_forward' => 'getIsForward'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['link_id'] = isset($data['link_id']) ? $data['link_id'] : null;
        $this->container['object_name'] = isset($data['object_name']) ? $data['object_name'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['link_object_name'] = isset($data['link_object_name']) ? $data['link_object_name'] : null;
        $this->container['link_object_id'] = isset($data['link_object_id']) ? $data['link_object_id'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['relationship_id'] = isset($data['relationship_id']) ? $data['relationship_id'] : null;
        $this->container['is_forward'] = isset($data['is_forward']) ? $data['is_forward'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['role']) && (mb_strlen($this->container['role']) > 255)) {
            $invalidProperties[] = "invalid value for 'role', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['role']) && (mb_strlen($this->container['role']) < 0)) {
            $invalidProperties[] = "invalid value for 'role', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['details']) && (mb_strlen($this->container['details']) > 255)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['details']) && (mb_strlen($this->container['details']) < 0)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets link_id
     *
     * @return int
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param int $link_id link_id
     *
     * @return $this
     */
    public function setLinkId($link_id)
    {
        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets object_name
     *
     * @return string
     */
    public function getObjectName()
    {
        return $this->container['object_name'];
    }

    /**
     * Sets object_name
     *
     * @param string $object_name object_name
     *
     * @return $this
     */
    public function setObjectName($object_name)
    {
        $this->container['object_name'] = $object_name;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return int
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param int $object_id object_id
     *
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets link_object_name
     *
     * @return string
     */
    public function getLinkObjectName()
    {
        return $this->container['link_object_name'];
    }

    /**
     * Sets link_object_name
     *
     * @param string $link_object_name link_object_name
     *
     * @return $this
     */
    public function setLinkObjectName($link_object_name)
    {
        $this->container['link_object_name'] = $link_object_name;

        return $this;
    }

    /**
     * Gets link_object_id
     *
     * @return int
     */
    public function getLinkObjectId()
    {
        return $this->container['link_object_id'];
    }

    /**
     * Sets link_object_id
     *
     * @param int $link_object_id link_object_id
     *
     * @return $this
     */
    public function setLinkObjectId($link_object_id)
    {
        $this->container['link_object_id'] = $link_object_id;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        if (!is_null($role) && (mb_strlen($role) > 255)) {
            throw new \InvalidArgumentException('invalid length for $role when calling APILinkDto., must be smaller than or equal to 255.');
        }
        if (!is_null($role) && (mb_strlen($role) < 0)) {
            throw new \InvalidArgumentException('invalid length for $role when calling APILinkDto., must be bigger than or equal to 0.');
        }

        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        if (!is_null($details) && (mb_strlen($details) > 255)) {
            throw new \InvalidArgumentException('invalid length for $details when calling APILinkDto., must be smaller than or equal to 255.');
        }
        if (!is_null($details) && (mb_strlen($details) < 0)) {
            throw new \InvalidArgumentException('invalid length for $details when calling APILinkDto., must be bigger than or equal to 0.');
        }

        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets relationship_id
     *
     * @return int
     */
    public function getRelationshipId()
    {
        return $this->container['relationship_id'];
    }

    /**
     * Sets relationship_id
     *
     * @param int $relationship_id relationship_id
     *
     * @return $this
     */
    public function setRelationshipId($relationship_id)
    {
        $this->container['relationship_id'] = $relationship_id;

        return $this;
    }

    /**
     * Gets is_forward
     *
     * @return bool
     */
    public function getIsForward()
    {
        return $this->container['is_forward'];
    }

    /**
     * Sets is_forward
     *
     * @param bool $is_forward is_forward
     *
     * @return $this
     */
    public function setIsForward($is_forward)
    {
        $this->container['is_forward'] = $is_forward;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


