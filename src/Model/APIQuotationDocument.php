<?php
/**
 * APIQuotationDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SternerStuff\InsightlyPHP\Model;

use \ArrayAccess;
use \SternerStuff\InsightlyPHP\ObjectSerializer;

/**
 * APIQuotationDocument Class Doc Comment
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APIQuotationDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APIQuotationDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quote_document_id' => 'int',
        'quotation_name' => 'string',
        'file_name' => 'string',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'quote_id' => 'string',
        'file_id' => 'string',
        'currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quote_document_id' => 'int64',
        'quotation_name' => 'string',
        'file_name' => 'string',
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'quote_id' => 'string',
        'file_id' => 'string',
        'currency_code' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quote_document_id' => 'QUOTE_DOCUMENT_ID',
        'quotation_name' => 'QUOTATION_NAME',
        'file_name' => 'FILE_NAME',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'quote_id' => 'QUOTE_ID',
        'file_id' => 'FILE_ID',
        'currency_code' => 'CURRENCY_CODE'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quote_document_id' => 'setQuoteDocumentId',
        'quotation_name' => 'setQuotationName',
        'file_name' => 'setFileName',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'quote_id' => 'setQuoteId',
        'file_id' => 'setFileId',
        'currency_code' => 'setCurrencyCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quote_document_id' => 'getQuoteDocumentId',
        'quotation_name' => 'getQuotationName',
        'file_name' => 'getFileName',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'quote_id' => 'getQuoteId',
        'file_id' => 'getFileId',
        'currency_code' => 'getCurrencyCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quote_document_id'] = isset($data['quote_document_id']) ? $data['quote_document_id'] : null;
        $this->container['quotation_name'] = isset($data['quotation_name']) ? $data['quotation_name'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['quote_id'] = isset($data['quote_id']) ? $data['quote_id'] : null;
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quotation_name'] === null) {
            $invalidProperties[] = "'quotation_name' can't be null";
        }
        if ((mb_strlen($this->container['quotation_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'quotation_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['file_name'] === null) {
            $invalidProperties[] = "'file_name' can't be null";
        }
        if ((mb_strlen($this->container['file_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['quote_id'] === null) {
            $invalidProperties[] = "'quote_id' can't be null";
        }
        if ((mb_strlen($this->container['quote_id']) > 0)) {
            $invalidProperties[] = "invalid value for 'quote_id', the character length must be smaller than or equal to 0.";
        }

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ((mb_strlen($this->container['file_id']) > 0)) {
            $invalidProperties[] = "invalid value for 'file_id', the character length must be smaller than or equal to 0.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quote_document_id
     *
     * @return int
     */
    public function getQuoteDocumentId()
    {
        return $this->container['quote_document_id'];
    }

    /**
     * Sets quote_document_id
     *
     * @param int $quote_document_id quote_document_id
     *
     * @return $this
     */
    public function setQuoteDocumentId($quote_document_id)
    {
        $this->container['quote_document_id'] = $quote_document_id;

        return $this;
    }

    /**
     * Gets quotation_name
     *
     * @return string
     */
    public function getQuotationName()
    {
        return $this->container['quotation_name'];
    }

    /**
     * Sets quotation_name
     *
     * @param string $quotation_name quotation_name
     *
     * @return $this
     */
    public function setQuotationName($quotation_name)
    {
        if ((mb_strlen($quotation_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $quotation_name when calling APIQuotationDocument., must be smaller than or equal to 255.');
        }

        $this->container['quotation_name'] = $quotation_name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        if ((mb_strlen($file_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling APIQuotationDocument., must be smaller than or equal to 255.');
        }

        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets quote_id
     *
     * @return string
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param string $quote_id quote_id
     *
     * @return $this
     */
    public function setQuoteId($quote_id)
    {
        if ((mb_strlen($quote_id) > 0)) {
            throw new \InvalidArgumentException('invalid length for $quote_id when calling APIQuotationDocument., must be smaller than or equal to 0.');
        }

        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id file_id
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        if ((mb_strlen($file_id) > 0)) {
            throw new \InvalidArgumentException('invalid length for $file_id when calling APIQuotationDocument., must be smaller than or equal to 0.');
        }

        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if ((mb_strlen($currency_code) > 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling APIQuotationDocument., must be smaller than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


