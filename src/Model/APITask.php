<?php
/**
 * APITask
 *
 * PHP version 5
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SternerStuff\InsightlyPHP\Model;

use \ArrayAccess;
use \SternerStuff\InsightlyPHP\ObjectSerializer;

/**
 * APITask Class Doc Comment
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APITask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APITask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_id' => 'int',
        'title' => 'string',
        'category_id' => 'int',
        'due_date' => '\DateTime',
        'completed' => 'bool',
        'details' => 'string',
        'status' => 'string',
        'priority' => 'int',
        'percent_complete' => 'int',
        'start_date' => '\DateTime',
        'milestone_id' => 'int',
        'responsible_user_id' => 'int',
        'owner_user_id' => 'int',
        'email_id' => 'int',
        'project_id' => 'int',
        'reminder_date_utc' => '\DateTime',
        'owner_visible' => 'bool',
        'parent_task_id' => 'int',
        'recurrence' => 'string',
        'opportunity_id' => 'int',
        'assigned_team_id' => 'int',
        'customfields' => '\SternerStuff\InsightlyPHP\Model\APICustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_id' => 'int64',
        'title' => 'string',
        'category_id' => 'int32',
        'due_date' => 'date-time',
        'completed' => 'boolean',
        'details' => 'string',
        'status' => 'string',
        'priority' => 'int32',
        'percent_complete' => 'int32',
        'start_date' => 'date-time',
        'milestone_id' => 'int32',
        'responsible_user_id' => 'int32',
        'owner_user_id' => 'int32',
        'email_id' => 'int32',
        'project_id' => 'int32',
        'reminder_date_utc' => 'date-time',
        'owner_visible' => 'boolean',
        'parent_task_id' => 'int32',
        'recurrence' => 'string',
        'opportunity_id' => 'int32',
        'assigned_team_id' => 'int32',
        'customfields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'TASK_ID',
        'title' => 'TITLE',
        'category_id' => 'CATEGORY_ID',
        'due_date' => 'DUE_DATE',
        'completed' => 'COMPLETED',
        'details' => 'DETAILS',
        'status' => 'STATUS',
        'priority' => 'PRIORITY',
        'percent_complete' => 'PERCENT_COMPLETE',
        'start_date' => 'START_DATE',
        'milestone_id' => 'MILESTONE_ID',
        'responsible_user_id' => 'RESPONSIBLE_USER_ID',
        'owner_user_id' => 'OWNER_USER_ID',
        'email_id' => 'EMAIL_ID',
        'project_id' => 'PROJECT_ID',
        'reminder_date_utc' => 'REMINDER_DATE_UTC',
        'owner_visible' => 'OWNER_VISIBLE',
        'parent_task_id' => 'PARENT_TASK_ID',
        'recurrence' => 'RECURRENCE',
        'opportunity_id' => 'OPPORTUNITY_ID',
        'assigned_team_id' => 'ASSIGNED_TEAM_ID',
        'customfields' => 'CUSTOMFIELDS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'title' => 'setTitle',
        'category_id' => 'setCategoryId',
        'due_date' => 'setDueDate',
        'completed' => 'setCompleted',
        'details' => 'setDetails',
        'status' => 'setStatus',
        'priority' => 'setPriority',
        'percent_complete' => 'setPercentComplete',
        'start_date' => 'setStartDate',
        'milestone_id' => 'setMilestoneId',
        'responsible_user_id' => 'setResponsibleUserId',
        'owner_user_id' => 'setOwnerUserId',
        'email_id' => 'setEmailId',
        'project_id' => 'setProjectId',
        'reminder_date_utc' => 'setReminderDateUtc',
        'owner_visible' => 'setOwnerVisible',
        'parent_task_id' => 'setParentTaskId',
        'recurrence' => 'setRecurrence',
        'opportunity_id' => 'setOpportunityId',
        'assigned_team_id' => 'setAssignedTeamId',
        'customfields' => 'setCustomfields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'title' => 'getTitle',
        'category_id' => 'getCategoryId',
        'due_date' => 'getDueDate',
        'completed' => 'getCompleted',
        'details' => 'getDetails',
        'status' => 'getStatus',
        'priority' => 'getPriority',
        'percent_complete' => 'getPercentComplete',
        'start_date' => 'getStartDate',
        'milestone_id' => 'getMilestoneId',
        'responsible_user_id' => 'getResponsibleUserId',
        'owner_user_id' => 'getOwnerUserId',
        'email_id' => 'getEmailId',
        'project_id' => 'getProjectId',
        'reminder_date_utc' => 'getReminderDateUtc',
        'owner_visible' => 'getOwnerVisible',
        'parent_task_id' => 'getParentTaskId',
        'recurrence' => 'getRecurrence',
        'opportunity_id' => 'getOpportunityId',
        'assigned_team_id' => 'getAssignedTeamId',
        'customfields' => 'getCustomfields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['percent_complete'] = isset($data['percent_complete']) ? $data['percent_complete'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['milestone_id'] = isset($data['milestone_id']) ? $data['milestone_id'] : null;
        $this->container['responsible_user_id'] = isset($data['responsible_user_id']) ? $data['responsible_user_id'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['reminder_date_utc'] = isset($data['reminder_date_utc']) ? $data['reminder_date_utc'] : null;
        $this->container['owner_visible'] = isset($data['owner_visible']) ? $data['owner_visible'] : null;
        $this->container['parent_task_id'] = isset($data['parent_task_id']) ? $data['parent_task_id'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['opportunity_id'] = isset($data['opportunity_id']) ? $data['opportunity_id'] : null;
        $this->container['assigned_team_id'] = isset($data['assigned_team_id']) ? $data['assigned_team_id'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['task_id'] === null) {
            $invalidProperties[] = "'task_id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 500)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if (!is_null($this->container['details']) && (mb_strlen($this->container['details']) > 4000)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 20)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['owner_user_id'] === null) {
            $invalidProperties[] = "'owner_user_id' can't be null";
        }
        if (!is_null($this->container['recurrence']) && (mb_strlen($this->container['recurrence']) > 20)) {
            $invalidProperties[] = "invalid value for 'recurrence', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return int
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 500)) {
            throw new \InvalidArgumentException('invalid length for $title when calling APITask., must be smaller than or equal to 500.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        if (!is_null($details) && (mb_strlen($details) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $details when calling APITask., must be smaller than or equal to 4000.');
        }

        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        if (!is_null($status) && (mb_strlen($status) > 20)) {
            throw new \InvalidArgumentException('invalid length for $status when calling APITask., must be smaller than or equal to 20.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets percent_complete
     *
     * @return int
     */
    public function getPercentComplete()
    {
        return $this->container['percent_complete'];
    }

    /**
     * Sets percent_complete
     *
     * @param int $percent_complete percent_complete
     *
     * @return $this
     */
    public function setPercentComplete($percent_complete)
    {
        $this->container['percent_complete'] = $percent_complete;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets milestone_id
     *
     * @return int
     */
    public function getMilestoneId()
    {
        return $this->container['milestone_id'];
    }

    /**
     * Sets milestone_id
     *
     * @param int $milestone_id milestone_id
     *
     * @return $this
     */
    public function setMilestoneId($milestone_id)
    {
        $this->container['milestone_id'] = $milestone_id;

        return $this;
    }

    /**
     * Gets responsible_user_id
     *
     * @return int
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     *
     * @param int $responsible_user_id responsible_user_id
     *
     * @return $this
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets email_id
     *
     * @return int
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param int $email_id email_id
     *
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets reminder_date_utc
     *
     * @return \DateTime
     */
    public function getReminderDateUtc()
    {
        return $this->container['reminder_date_utc'];
    }

    /**
     * Sets reminder_date_utc
     *
     * @param \DateTime $reminder_date_utc reminder_date_utc
     *
     * @return $this
     */
    public function setReminderDateUtc($reminder_date_utc)
    {
        $this->container['reminder_date_utc'] = $reminder_date_utc;

        return $this;
    }

    /**
     * Gets owner_visible
     *
     * @return bool
     */
    public function getOwnerVisible()
    {
        return $this->container['owner_visible'];
    }

    /**
     * Sets owner_visible
     *
     * @param bool $owner_visible owner_visible
     *
     * @return $this
     */
    public function setOwnerVisible($owner_visible)
    {
        $this->container['owner_visible'] = $owner_visible;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return int
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param int $parent_task_id parent_task_id
     *
     * @return $this
     */
    public function setParentTaskId($parent_task_id)
    {
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return string
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param string $recurrence recurrence
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        if (!is_null($recurrence) && (mb_strlen($recurrence) > 20)) {
            throw new \InvalidArgumentException('invalid length for $recurrence when calling APITask., must be smaller than or equal to 20.');
        }

        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets opportunity_id
     *
     * @return int
     */
    public function getOpportunityId()
    {
        return $this->container['opportunity_id'];
    }

    /**
     * Sets opportunity_id
     *
     * @param int $opportunity_id opportunity_id
     *
     * @return $this
     */
    public function setOpportunityId($opportunity_id)
    {
        $this->container['opportunity_id'] = $opportunity_id;

        return $this;
    }

    /**
     * Gets assigned_team_id
     *
     * @return int
     */
    public function getAssignedTeamId()
    {
        return $this->container['assigned_team_id'];
    }

    /**
     * Sets assigned_team_id
     *
     * @param int $assigned_team_id assigned_team_id
     *
     * @return $this
     */
    public function setAssignedTeamId($assigned_team_id)
    {
        $this->container['assigned_team_id'] = $assigned_team_id;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \SternerStuff\InsightlyPHP\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \SternerStuff\InsightlyPHP\Model\APICustomField[] $customfields customfields
     *
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


