<?php
/**
 * APIEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SternerStuff\InsightlyPHP\Model;

use \ArrayAccess;
use \SternerStuff\InsightlyPHP\ObjectSerializer;

/**
 * APIEmail Class Doc Comment
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APIEmail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APIEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email_id' => 'int',
        'email_from' => 'string',
        'subject' => 'string',
        'email_date_utc' => '\DateTime',
        'format' => 'string',
        'size' => 'int',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'queued_send_date_utc' => '\DateTime',
        'created_user_id' => 'int',
        'tags' => '\SternerStuff\InsightlyPHP\Model\APITag[]',
        'links' => '\SternerStuff\InsightlyPHP\Model\APILinkDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email_id' => 'int64',
        'email_from' => 'string',
        'subject' => 'string',
        'email_date_utc' => 'date-time',
        'format' => 'string',
        'size' => 'int64',
        'owner_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'queued_send_date_utc' => 'date-time',
        'created_user_id' => 'int32',
        'tags' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_id' => 'EMAIL_ID',
        'email_from' => 'EMAIL_FROM',
        'subject' => 'SUBJECT',
        'email_date_utc' => 'EMAIL_DATE_UTC',
        'format' => 'FORMAT',
        'size' => 'SIZE',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'queued_send_date_utc' => 'QUEUED_SEND_DATE_UTC',
        'created_user_id' => 'CREATED_USER_ID',
        'tags' => 'TAGS',
        'links' => 'LINKS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_id' => 'setEmailId',
        'email_from' => 'setEmailFrom',
        'subject' => 'setSubject',
        'email_date_utc' => 'setEmailDateUtc',
        'format' => 'setFormat',
        'size' => 'setSize',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'queued_send_date_utc' => 'setQueuedSendDateUtc',
        'created_user_id' => 'setCreatedUserId',
        'tags' => 'setTags',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_id' => 'getEmailId',
        'email_from' => 'getEmailFrom',
        'subject' => 'getSubject',
        'email_date_utc' => 'getEmailDateUtc',
        'format' => 'getFormat',
        'size' => 'getSize',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'queued_send_date_utc' => 'getQueuedSendDateUtc',
        'created_user_id' => 'getCreatedUserId',
        'tags' => 'getTags',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['email_date_utc'] = isset($data['email_date_utc']) ? $data['email_date_utc'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['queued_send_date_utc'] = isset($data['queued_send_date_utc']) ? $data['queued_send_date_utc'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['email_from']) && (mb_strlen($this->container['email_from']) > 500)) {
            $invalidProperties[] = "invalid value for 'email_from', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 500)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['format']) && (mb_strlen($this->container['format']) > 5)) {
            $invalidProperties[] = "invalid value for 'format', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['owner_user_id'] === null) {
            $invalidProperties[] = "'owner_user_id' can't be null";
        }
        if ($this->container['date_created_utc'] === null) {
            $invalidProperties[] = "'date_created_utc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_id
     *
     * @return int
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param int $email_id email_id
     *
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets email_from
     *
     * @return string
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     *
     * @param string $email_from email_from
     *
     * @return $this
     */
    public function setEmailFrom($email_from)
    {
        if (!is_null($email_from) && (mb_strlen($email_from) > 500)) {
            throw new \InvalidArgumentException('invalid length for $email_from when calling APIEmail., must be smaller than or equal to 500.');
        }

        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 500)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling APIEmail., must be smaller than or equal to 500.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets email_date_utc
     *
     * @return \DateTime
     */
    public function getEmailDateUtc()
    {
        return $this->container['email_date_utc'];
    }

    /**
     * Sets email_date_utc
     *
     * @param \DateTime $email_date_utc email_date_utc
     *
     * @return $this
     */
    public function setEmailDateUtc($email_date_utc)
    {
        $this->container['email_date_utc'] = $email_date_utc;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        if (!is_null($format) && (mb_strlen($format) > 5)) {
            throw new \InvalidArgumentException('invalid length for $format when calling APIEmail., must be smaller than or equal to 5.');
        }

        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets queued_send_date_utc
     *
     * @return \DateTime
     */
    public function getQueuedSendDateUtc()
    {
        return $this->container['queued_send_date_utc'];
    }

    /**
     * Sets queued_send_date_utc
     *
     * @param \DateTime $queued_send_date_utc queued_send_date_utc
     *
     * @return $this
     */
    public function setQueuedSendDateUtc($queued_send_date_utc)
    {
        $this->container['queued_send_date_utc'] = $queued_send_date_utc;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id created_user_id
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \SternerStuff\InsightlyPHP\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \SternerStuff\InsightlyPHP\Model\APITag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \SternerStuff\InsightlyPHP\Model\APILinkDto[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \SternerStuff\InsightlyPHP\Model\APILinkDto[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


