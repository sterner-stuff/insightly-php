<?php
/**
 * APICustomObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v3.1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SternerStuff\InsightlyPHP\Model;

use \ArrayAccess;
use \SternerStuff\InsightlyPHP\ObjectSerializer;

/**
 * APICustomObject Class Doc Comment
 *
 * @category Class
 * @package  SternerStuff\InsightlyPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class APICustomObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'APICustomObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'object_name' => 'string',
        'singular_label' => 'string',
        'plural_label' => 'string',
        'description' => 'string',
        'record_name_label' => 'string',
        'record_name_type' => 'string',
        'record_name_display_format' => 'string',
        'enable_navbar' => 'bool',
        'enable_workflows' => 'bool',
        'created_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'object_name' => null,
        'singular_label' => null,
        'plural_label' => null,
        'description' => null,
        'record_name_label' => null,
        'record_name_type' => null,
        'record_name_display_format' => null,
        'enable_navbar' => null,
        'enable_workflows' => null,
        'created_user_id' => 'int32',
        'date_created_utc' => 'date-time',
        'date_updated_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object_name' => 'OBJECT_NAME',
        'singular_label' => 'SINGULAR_LABEL',
        'plural_label' => 'PLURAL_LABEL',
        'description' => 'DESCRIPTION',
        'record_name_label' => 'RECORD_NAME_LABEL',
        'record_name_type' => 'RECORD_NAME_TYPE',
        'record_name_display_format' => 'RECORD_NAME_DISPLAY_FORMAT',
        'enable_navbar' => 'ENABLE_NAVBAR',
        'enable_workflows' => 'ENABLE_WORKFLOWS',
        'created_user_id' => 'CREATED_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object_name' => 'setObjectName',
        'singular_label' => 'setSingularLabel',
        'plural_label' => 'setPluralLabel',
        'description' => 'setDescription',
        'record_name_label' => 'setRecordNameLabel',
        'record_name_type' => 'setRecordNameType',
        'record_name_display_format' => 'setRecordNameDisplayFormat',
        'enable_navbar' => 'setEnableNavbar',
        'enable_workflows' => 'setEnableWorkflows',
        'created_user_id' => 'setCreatedUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object_name' => 'getObjectName',
        'singular_label' => 'getSingularLabel',
        'plural_label' => 'getPluralLabel',
        'description' => 'getDescription',
        'record_name_label' => 'getRecordNameLabel',
        'record_name_type' => 'getRecordNameType',
        'record_name_display_format' => 'getRecordNameDisplayFormat',
        'enable_navbar' => 'getEnableNavbar',
        'enable_workflows' => 'getEnableWorkflows',
        'created_user_id' => 'getCreatedUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object_name'] = isset($data['object_name']) ? $data['object_name'] : null;
        $this->container['singular_label'] = isset($data['singular_label']) ? $data['singular_label'] : null;
        $this->container['plural_label'] = isset($data['plural_label']) ? $data['plural_label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['record_name_label'] = isset($data['record_name_label']) ? $data['record_name_label'] : null;
        $this->container['record_name_type'] = isset($data['record_name_type']) ? $data['record_name_type'] : null;
        $this->container['record_name_display_format'] = isset($data['record_name_display_format']) ? $data['record_name_display_format'] : null;
        $this->container['enable_navbar'] = isset($data['enable_navbar']) ? $data['enable_navbar'] : null;
        $this->container['enable_workflows'] = isset($data['enable_workflows']) ? $data['enable_workflows'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object_name
     *
     * @return string
     */
    public function getObjectName()
    {
        return $this->container['object_name'];
    }

    /**
     * Sets object_name
     *
     * @param string $object_name object_name
     *
     * @return $this
     */
    public function setObjectName($object_name)
    {
        $this->container['object_name'] = $object_name;

        return $this;
    }

    /**
     * Gets singular_label
     *
     * @return string
     */
    public function getSingularLabel()
    {
        return $this->container['singular_label'];
    }

    /**
     * Sets singular_label
     *
     * @param string $singular_label singular_label
     *
     * @return $this
     */
    public function setSingularLabel($singular_label)
    {
        $this->container['singular_label'] = $singular_label;

        return $this;
    }

    /**
     * Gets plural_label
     *
     * @return string
     */
    public function getPluralLabel()
    {
        return $this->container['plural_label'];
    }

    /**
     * Sets plural_label
     *
     * @param string $plural_label plural_label
     *
     * @return $this
     */
    public function setPluralLabel($plural_label)
    {
        $this->container['plural_label'] = $plural_label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets record_name_label
     *
     * @return string
     */
    public function getRecordNameLabel()
    {
        return $this->container['record_name_label'];
    }

    /**
     * Sets record_name_label
     *
     * @param string $record_name_label record_name_label
     *
     * @return $this
     */
    public function setRecordNameLabel($record_name_label)
    {
        $this->container['record_name_label'] = $record_name_label;

        return $this;
    }

    /**
     * Gets record_name_type
     *
     * @return string
     */
    public function getRecordNameType()
    {
        return $this->container['record_name_type'];
    }

    /**
     * Sets record_name_type
     *
     * @param string $record_name_type record_name_type
     *
     * @return $this
     */
    public function setRecordNameType($record_name_type)
    {
        $this->container['record_name_type'] = $record_name_type;

        return $this;
    }

    /**
     * Gets record_name_display_format
     *
     * @return string
     */
    public function getRecordNameDisplayFormat()
    {
        return $this->container['record_name_display_format'];
    }

    /**
     * Sets record_name_display_format
     *
     * @param string $record_name_display_format record_name_display_format
     *
     * @return $this
     */
    public function setRecordNameDisplayFormat($record_name_display_format)
    {
        $this->container['record_name_display_format'] = $record_name_display_format;

        return $this;
    }

    /**
     * Gets enable_navbar
     *
     * @return bool
     */
    public function getEnableNavbar()
    {
        return $this->container['enable_navbar'];
    }

    /**
     * Sets enable_navbar
     *
     * @param bool $enable_navbar enable_navbar
     *
     * @return $this
     */
    public function setEnableNavbar($enable_navbar)
    {
        $this->container['enable_navbar'] = $enable_navbar;

        return $this;
    }

    /**
     * Gets enable_workflows
     *
     * @return bool
     */
    public function getEnableWorkflows()
    {
        return $this->container['enable_workflows'];
    }

    /**
     * Sets enable_workflows
     *
     * @param bool $enable_workflows enable_workflows
     *
     * @return $this
     */
    public function setEnableWorkflows($enable_workflows)
    {
        $this->container['enable_workflows'] = $enable_workflows;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id created_user_id
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     *
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     *
     * @param \DateTime $date_created_utc date_created_utc
     *
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     *
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     *
     * @param \DateTime $date_updated_utc date_updated_utc
     *
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


